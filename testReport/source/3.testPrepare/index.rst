测试准备
############

测试方法
==========

本项目的测试分为单元测试与回归测试。

单元测试针对系统中的一个或若干函数组成的子系统进行。 测试时使用单元测试脚本, 仿真若干组正常或异常的输入, 
测试系统是否返回期望的输出以及能否正确的处理异常输入。每一个单元测试用例应该保证测试的原子性，在测试代码内部合理的使用断言。
单元测试用例的结果有两种: 通过与不通过。

回归测试针对整个系统进行。测试时，以一个或多个用例为基本单位，
测试人员扮演用户的角色与系统交互, 测试系统是否能够提供需求文档用例描述的功能。

测试时间安排
=============

本项目的单元测试在系统开发的过程中进行，并在项目第三次迭代结束后，集中记录在本报告中。

本项目的回归测试在系统第三次迭代结束后集中进行。在一天内完成所有已建模用例的回归测试，并记录在本报告中。

测试环境
========

测试时提供以下硬件环境

+ Wifi温度传感器: 系统编号6001
+ Wifi压力传感器: 系统编号6002
+ Wifi入侵检测传感器: 系统编号6003
+ Lora 控制节点: 地址1235
+ Lora 报警节点: 地址1237
+ Lora 网关
+ 嵌入式终端节点: Cortex-A9 架构 Altera Cyclone V SOC
+ 个人电脑

测试时提供以下软件环境

+ Shattuckite 后台前端页面
+ Shattuckite 中台前端页面
+ Shattuckite-RESTful 服务器
+ Shattuckite-Embedded-Node 数据处理组件
+ Shattuckite-Lora-Driver 嵌入式端Lora驱动
+ Mosquitto MQTT测试服务器

    + tcp 协议地址: ali.cnworkshop.xyz:20000
    + websocket 协议地址: ali.cnworkshop.xyz:20010

+ Redis 分布式KV存储测试服务器: 地址ali.cnworkshop.xyz:20001
+ Mysql 关系型数据库测试服务器: 地址ali.cnworkshop.xyz:5005

    + 测试数据库名: Shattuckite
    + 测试用户名: Shattuckite-Django 

此外有一系列为测试工作编写的小工具, 再此不单独列出，将在测试用例中说明。