嵌入式终端Redis
*******************************************

设计
########

该组件基本信息如下:

.. componentdetail:: redis

程序结构
============

.. uml:: artifacts/uml/edgeCoreClassDiagram.uml 
    :scale: 50%
    :align: center
    :caption: 嵌入式终端核心 UML 类图

嵌入式终端核心由以下各类组成:

.. todo:: 插入类列表


终端核心运行状态
=================
 
为终端核心定义三种状态.

Phase1
+++++++++

当嵌入式终端核心的主要组件可以正常工作时, 系统达到 `Phase1` . 该状态可以在没有互联网连接的情况下达到. 

当终端核心位于该状态时,将加载 :ref:`基础配置 <edgeCoreBasicConf>`, 命令监听线程和数据推送线程将按照其中的配置开始工作.

此时订阅线程与发布线程将分别轮询连接远程Broker.

Phase2
+++++++++++

当订阅线程和发布线程均可以连接到远程Mqtt Broker并成功获得命令回显时,系统达到 `Phase2`, 此时终端与服务端的互联网通信正常且远程的Broker正常工作.

该状态下,发布线程将轮询的向远程推送一条初始化命令回显, 服务端在接收到该回显后回推一条初始化配置命令.当订阅线程收到初始化配置命令后,在dispatch 该命令的同时,
将系统状态设置为Phase3.

Phase3
+++++++++

当推送的命令回显被服务端处理且服务端回推命令后,系统达到 `Phase3`, 此时终端与服务端通信正常, 远程Broker正常工作且后端的数据处理系统正常工作.


离线运行支持
==============

终端核心在网络连接受阻的情况下,应该仍然能够正常运行.为此在设计时,引入了Redis中间层. 在系统位于 :ref:`Phase1` 时,发布线程会把数据发布到本地的Redis Topic中.
通过合理的配置Redis,终端核心可以在没有网络连接的情况下,在内存中持久化一定数量的需要发布到系统的各种数据. 在终端达到 :ref:`Phase3` 时, 发布线程订阅本地Redis相关 Topic
并从Redis中读取数据发布到远程Broker.

.. _edgeCoreBasicConf:

为了确保系统能够离线运行,以本地文件的方式提供基础配置.


行为
########

终端核心初始化
================

1. 将 :ref:`基础配置 <edgeCoreBasicConf>` 载入本地redis缓存; 实例化命令监听及数据发布类. 此时系统到达 Phase1.
2. 分别向Broker注册属于本终端的订阅和发布 Topic, 在成功设置Qos等信息并获得服务器回显时, 此时系统到达 Phase2.
3. 推送一条初始化命令回显.服务器收到初始化命令回显后.应当回推一条缓存更新指令.收到第一次缓存更新指令后,系统到达 Phase3.

在核心初始化完成后入工作状态 , 然后(并行的)完成下列工作

1. 根据本地缓存中的配置数据, 定时将传感器的数据发布到Broker, 参见:ref:`推送数据`
2. 监听本地Redis会话, 执行接收到的命令,并将命令行结果发布到Topic1. 参见 :ref:`执行命令`

执行命令
============

考虑到内网穿透以及手动维护长连接带来的不确定性,我们并没有使用类似于 ``gRPC`` 一类的框架来实现远程过程调用. 嵌入式终端核心实现了一套自己的远程过程调用系统. 基本的设计理念包括

1. 使用发布/订阅机制分发调用请求
2. 使用纯文本序列化调用请求

在具体实现的过程中, 订阅线程订阅服务端用于命令分发的Topic,在收到命令后将命令转发至本地Redis; 命令执行线程从本地redis获取序列化后的调用请求后,
采用预先约定的协议反序列化数据,根据获得的信息调用相应的本地方法,获取命令输出; 
接着命令执行线程将命令输出序列化成命令回显发布到本地redis的相关topic; 发布线程从本地redis获得该回显数据并将其推送到远程服务器中.

在调用本地方法时, 命令执行线程将通过子进程的方式调用外部的程序,并通过管道获取输出.

推送数据
============










